// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: audio.proto

package audioproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AudioRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AudioPath     string                 `protobuf:"bytes,1,opt,name=audio_path,json=audioPath,proto3" json:"audio_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioRequest) Reset() {
	*x = AudioRequest{}
	mi := &file_audio_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioRequest) ProtoMessage() {}

func (x *AudioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioRequest.ProtoReflect.Descriptor instead.
func (*AudioRequest) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{0}
}

func (x *AudioRequest) GetAudioPath() string {
	if x != nil {
		return x.AudioPath
	}
	return ""
}

type AudioResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NoteFeatures  []*AudioEvent          `protobuf:"bytes,1,rep,name=note_features,json=noteFeatures,proto3" json:"note_features,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioResponse) Reset() {
	*x = AudioResponse{}
	mi := &file_audio_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioResponse) ProtoMessage() {}

func (x *AudioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioResponse.ProtoReflect.Descriptor instead.
func (*AudioResponse) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{1}
}

func (x *AudioResponse) GetNoteFeatures() []*AudioEvent {
	if x != nil {
		return x.NoteFeatures
	}
	return nil
}

type AudioEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Time          float32                `protobuf:"fixed32,1,opt,name=time,proto3" json:"time,omitempty"`
	Pitch         float32                `protobuf:"fixed32,2,opt,name=pitch,proto3" json:"pitch,omitempty"`
	MainNote      string                 `protobuf:"bytes,3,opt,name=main_note,json=mainNote,proto3" json:"main_note,omitempty"`
	Octave        int32                  `protobuf:"varint,4,opt,name=octave,proto3" json:"octave,omitempty"`
	ChromaNotes   []string               `protobuf:"bytes,5,rep,name=chroma_notes,json=chromaNotes,proto3" json:"chroma_notes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioEvent) Reset() {
	*x = AudioEvent{}
	mi := &file_audio_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioEvent) ProtoMessage() {}

func (x *AudioEvent) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioEvent.ProtoReflect.Descriptor instead.
func (*AudioEvent) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{2}
}

func (x *AudioEvent) GetTime() float32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AudioEvent) GetPitch() float32 {
	if x != nil {
		return x.Pitch
	}
	return 0
}

func (x *AudioEvent) GetMainNote() string {
	if x != nil {
		return x.MainNote
	}
	return ""
}

func (x *AudioEvent) GetOctave() int32 {
	if x != nil {
		return x.Octave
	}
	return 0
}

func (x *AudioEvent) GetChromaNotes() []string {
	if x != nil {
		return x.ChromaNotes
	}
	return nil
}

var File_audio_proto protoreflect.FileDescriptor

const file_audio_proto_rawDesc = "" +
	"\n" +
	"\vaudio.proto\x12\x05audio\"-\n" +
	"\fAudioRequest\x12\x1d\n" +
	"\n" +
	"audio_path\x18\x01 \x01(\tR\taudioPath\"G\n" +
	"\rAudioResponse\x126\n" +
	"\rnote_features\x18\x01 \x03(\v2\x11.audio.AudioEventR\fnoteFeatures\"\x8e\x01\n" +
	"\n" +
	"AudioEvent\x12\x12\n" +
	"\x04time\x18\x01 \x01(\x02R\x04time\x12\x14\n" +
	"\x05pitch\x18\x02 \x01(\x02R\x05pitch\x12\x1b\n" +
	"\tmain_note\x18\x03 \x01(\tR\bmainNote\x12\x16\n" +
	"\x06octave\x18\x04 \x01(\x05R\x06octave\x12!\n" +
	"\fchroma_notes\x18\x05 \x03(\tR\vchromaNotes2J\n" +
	"\rAudioAnalyzer\x129\n" +
	"\fProcessAudio\x12\x13.audio.AudioRequest\x1a\x14.audio.AudioResponseB\x15Z\x13internal/audioprotob\x06proto3"

var (
	file_audio_proto_rawDescOnce sync.Once
	file_audio_proto_rawDescData []byte
)

func file_audio_proto_rawDescGZIP() []byte {
	file_audio_proto_rawDescOnce.Do(func() {
		file_audio_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_audio_proto_rawDesc), len(file_audio_proto_rawDesc)))
	})
	return file_audio_proto_rawDescData
}

var file_audio_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_audio_proto_goTypes = []any{
	(*AudioRequest)(nil),  // 0: audio.AudioRequest
	(*AudioResponse)(nil), // 1: audio.AudioResponse
	(*AudioEvent)(nil),    // 2: audio.AudioEvent
}
var file_audio_proto_depIdxs = []int32{
	2, // 0: audio.AudioResponse.note_features:type_name -> audio.AudioEvent
	0, // 1: audio.AudioAnalyzer.ProcessAudio:input_type -> audio.AudioRequest
	1, // 2: audio.AudioAnalyzer.ProcessAudio:output_type -> audio.AudioResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_audio_proto_init() }
func file_audio_proto_init() {
	if File_audio_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_audio_proto_rawDesc), len(file_audio_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_audio_proto_goTypes,
		DependencyIndexes: file_audio_proto_depIdxs,
		MessageInfos:      file_audio_proto_msgTypes,
	}.Build()
	File_audio_proto = out.File
	file_audio_proto_goTypes = nil
	file_audio_proto_depIdxs = nil
}
