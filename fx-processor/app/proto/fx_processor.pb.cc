// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/fx_processor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/fx_processor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fxp {
class AudioRequest_ParamsEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AudioRequest::AudioRequest_ParamsEntry>
     _instance;
} _AudioRequest_ParamsEntry_default_instance_;
class AudioRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AudioRequest>
     _instance;
} _AudioRequest_default_instance_;
class AudioResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AudioResponse>
     _instance;
} _AudioResponse_default_instance_;

namespace protobuf_proto_2ffx_5fprocessor_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioRequest, audio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioRequest, effect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioRequest, params_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioResponse, processed_audio_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(AudioRequest)},
  { 8, -1, sizeof(AudioResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AudioRequest_ParamsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AudioRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AudioResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "proto/fx_processor.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[0].reflection = AudioRequest::AudioRequest_ParamsEntry::CreateReflection(file_level_metadata[0].descriptor, _AudioRequest_ParamsEntry_default_instance_._instance.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _AudioRequest_ParamsEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AudioRequest_ParamsEntry_default_instance_);_AudioRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AudioRequest_default_instance_);_AudioResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AudioResponse_default_instance_);_AudioRequest_ParamsEntry_default_instance_._instance.get_mutable()->set_default_instance(_AudioRequest_ParamsEntry_default_instance_._instance.get_mutable());
  _AudioRequest_ParamsEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030proto/fx_processor.proto\022\003fxp\"\235\001\n\014Audi"
      "oRequest\022\r\n\005audio\030\001 \001(\014\022 \n\006effect\030\002 \001(\0162"
      "\020.fxp.AudioEffect\022-\n\006params\030\003 \003(\0132\035.fxp."
      "AudioRequest.ParamsEntry\032-\n\013ParamsEntry\022"
      "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001\"(\n\rAudio"
      "Response\022\027\n\017processed_audio\030\001 \001(\014*4\n\013Aud"
      "ioEffect\022\016\n\nDISTORTION\020\000\022\n\n\006REVERB\020\001\022\t\n\005"
      "DELAY\020\0022C\n\013FXProcessor\0224\n\014ProcessAudio\022\021"
      ".fxp.AudioRequest\032\021.fxp.AudioRequestB\033Z\031"
      "internal/fxprocessorprotob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 393);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/fx_processor.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_proto_2ffx_5fprocessor_2eproto

const ::google::protobuf::EnumDescriptor* AudioEffect_descriptor() {
  protobuf_proto_2ffx_5fprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ffx_5fprocessor_2eproto::file_level_enum_descriptors[0];
}
bool AudioEffect_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

AudioRequest::AudioRequest_ParamsEntry::AudioRequest_ParamsEntry() {}
AudioRequest::AudioRequest_ParamsEntry::AudioRequest_ParamsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata AudioRequest::AudioRequest_ParamsEntry::GetMetadata() const {
  protobuf_proto_2ffx_5fprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ffx_5fprocessor_2eproto::file_level_metadata[0];
}
void AudioRequest::AudioRequest_ParamsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void AudioRequest::AudioRequest_ParamsEntry::MergeFrom(const AudioRequest_ParamsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioRequest::kAudioFieldNumber;
const int AudioRequest::kEffectFieldNumber;
const int AudioRequest::kParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioRequest::AudioRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2ffx_5fprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fxp.AudioRequest)
}
AudioRequest::AudioRequest(const AudioRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  params_.MergeFrom(from.params_);
  audio_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.audio().size() > 0) {
    audio_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_);
  }
  effect_ = from.effect_;
  // @@protoc_insertion_point(copy_constructor:fxp.AudioRequest)
}

void AudioRequest::SharedCtor() {
  audio_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effect_ = 0;
  _cached_size_ = 0;
}

AudioRequest::~AudioRequest() {
  // @@protoc_insertion_point(destructor:fxp.AudioRequest)
  SharedDtor();
}

void AudioRequest::SharedDtor() {
  audio_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AudioRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioRequest::descriptor() {
  protobuf_proto_2ffx_5fprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ffx_5fprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AudioRequest& AudioRequest::default_instance() {
  protobuf_proto_2ffx_5fprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioRequest* AudioRequest::New(::google::protobuf::Arena* arena) const {
  AudioRequest* n = new AudioRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fxp.AudioRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  audio_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effect_ = 0;
  _internal_metadata_.Clear();
}

bool AudioRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fxp.AudioRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes audio = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fxp.AudioEffect effect = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_effect(static_cast< ::fxp::AudioEffect >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, float> params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          AudioRequest_ParamsEntry::Parser< ::google::protobuf::internal::MapField<
              AudioRequest_ParamsEntry,
              ::std::string, float,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::google::protobuf::Map< ::std::string, float > > parser(&params_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fxp.AudioRequest.ParamsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fxp.AudioRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fxp.AudioRequest)
  return false;
#undef DO_
}

void AudioRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fxp.AudioRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes audio = 1;
  if (this->audio().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->audio(), output);
  }

  // .fxp.AudioEffect effect = 2;
  if (this->effect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->effect(), output);
  }

  // map<string, float> params = 3;
  if (!this->params().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "fxp.AudioRequest.ParamsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->params().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->params().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AudioRequest_ParamsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(params_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<AudioRequest_ParamsEntry> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it) {
        entry.reset(params_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fxp.AudioRequest)
}

::google::protobuf::uint8* AudioRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fxp.AudioRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes audio = 1;
  if (this->audio().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->audio(), target);
  }

  // .fxp.AudioEffect effect = 2;
  if (this->effect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->effect(), target);
  }

  // map<string, float> params = 3;
  if (!this->params().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "fxp.AudioRequest.ParamsEntry.key");
      }
    };

    if (deterministic &&
        this->params().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->params().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AudioRequest_ParamsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(params_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<AudioRequest_ParamsEntry> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it) {
        entry.reset(params_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fxp.AudioRequest)
  return target;
}

size_t AudioRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fxp.AudioRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, float> params = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->params_size());
  {
    ::google::protobuf::scoped_ptr<AudioRequest_ParamsEntry> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->params().begin();
        it != this->params().end(); ++it) {
      entry.reset(params_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // bytes audio = 1;
  if (this->audio().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->audio());
  }

  // .fxp.AudioEffect effect = 2;
  if (this->effect() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->effect());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fxp.AudioRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AudioRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fxp.AudioRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fxp.AudioRequest)
    MergeFrom(*source);
  }
}

void AudioRequest::MergeFrom(const AudioRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fxp.AudioRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (from.audio().size() > 0) {

    audio_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_);
  }
  if (from.effect() != 0) {
    set_effect(from.effect());
  }
}

void AudioRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fxp.AudioRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioRequest::CopyFrom(const AudioRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fxp.AudioRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioRequest::IsInitialized() const {
  return true;
}

void AudioRequest::Swap(AudioRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioRequest::InternalSwap(AudioRequest* other) {
  using std::swap;
  params_.Swap(&other->params_);
  audio_.Swap(&other->audio_);
  swap(effect_, other->effect_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AudioRequest::GetMetadata() const {
  protobuf_proto_2ffx_5fprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ffx_5fprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioRequest

// bytes audio = 1;
void AudioRequest::clear_audio() {
  audio_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AudioRequest::audio() const {
  // @@protoc_insertion_point(field_get:fxp.AudioRequest.audio)
  return audio_.GetNoArena();
}
void AudioRequest::set_audio(const ::std::string& value) {
  
  audio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fxp.AudioRequest.audio)
}
#if LANG_CXX11
void AudioRequest::set_audio(::std::string&& value) {
  
  audio_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fxp.AudioRequest.audio)
}
#endif
void AudioRequest::set_audio(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  audio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fxp.AudioRequest.audio)
}
void AudioRequest::set_audio(const void* value, size_t size) {
  
  audio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fxp.AudioRequest.audio)
}
::std::string* AudioRequest::mutable_audio() {
  
  // @@protoc_insertion_point(field_mutable:fxp.AudioRequest.audio)
  return audio_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AudioRequest::release_audio() {
  // @@protoc_insertion_point(field_release:fxp.AudioRequest.audio)
  
  return audio_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioRequest::set_allocated_audio(::std::string* audio) {
  if (audio != NULL) {
    
  } else {
    
  }
  audio_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio);
  // @@protoc_insertion_point(field_set_allocated:fxp.AudioRequest.audio)
}

// .fxp.AudioEffect effect = 2;
void AudioRequest::clear_effect() {
  effect_ = 0;
}
::fxp::AudioEffect AudioRequest::effect() const {
  // @@protoc_insertion_point(field_get:fxp.AudioRequest.effect)
  return static_cast< ::fxp::AudioEffect >(effect_);
}
void AudioRequest::set_effect(::fxp::AudioEffect value) {
  
  effect_ = value;
  // @@protoc_insertion_point(field_set:fxp.AudioRequest.effect)
}

// map<string, float> params = 3;
int AudioRequest::params_size() const {
  return params_.size();
}
void AudioRequest::clear_params() {
  params_.Clear();
}
 const ::google::protobuf::Map< ::std::string, float >&
AudioRequest::params() const {
  // @@protoc_insertion_point(field_map:fxp.AudioRequest.params)
  return params_.GetMap();
}
 ::google::protobuf::Map< ::std::string, float >*
AudioRequest::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:fxp.AudioRequest.params)
  return params_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioResponse::kProcessedAudioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioResponse::AudioResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2ffx_5fprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fxp.AudioResponse)
}
AudioResponse::AudioResponse(const AudioResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  processed_audio_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.processed_audio().size() > 0) {
    processed_audio_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processed_audio_);
  }
  // @@protoc_insertion_point(copy_constructor:fxp.AudioResponse)
}

void AudioResponse::SharedCtor() {
  processed_audio_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AudioResponse::~AudioResponse() {
  // @@protoc_insertion_point(destructor:fxp.AudioResponse)
  SharedDtor();
}

void AudioResponse::SharedDtor() {
  processed_audio_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AudioResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioResponse::descriptor() {
  protobuf_proto_2ffx_5fprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ffx_5fprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AudioResponse& AudioResponse::default_instance() {
  protobuf_proto_2ffx_5fprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioResponse* AudioResponse::New(::google::protobuf::Arena* arena) const {
  AudioResponse* n = new AudioResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fxp.AudioResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  processed_audio_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AudioResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fxp.AudioResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes processed_audio = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_processed_audio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fxp.AudioResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fxp.AudioResponse)
  return false;
#undef DO_
}

void AudioResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fxp.AudioResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes processed_audio = 1;
  if (this->processed_audio().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->processed_audio(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fxp.AudioResponse)
}

::google::protobuf::uint8* AudioResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fxp.AudioResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes processed_audio = 1;
  if (this->processed_audio().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->processed_audio(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fxp.AudioResponse)
  return target;
}

size_t AudioResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fxp.AudioResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes processed_audio = 1;
  if (this->processed_audio().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->processed_audio());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fxp.AudioResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AudioResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fxp.AudioResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fxp.AudioResponse)
    MergeFrom(*source);
  }
}

void AudioResponse::MergeFrom(const AudioResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fxp.AudioResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.processed_audio().size() > 0) {

    processed_audio_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processed_audio_);
  }
}

void AudioResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fxp.AudioResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioResponse::CopyFrom(const AudioResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fxp.AudioResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioResponse::IsInitialized() const {
  return true;
}

void AudioResponse::Swap(AudioResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioResponse::InternalSwap(AudioResponse* other) {
  using std::swap;
  processed_audio_.Swap(&other->processed_audio_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AudioResponse::GetMetadata() const {
  protobuf_proto_2ffx_5fprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2ffx_5fprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioResponse

// bytes processed_audio = 1;
void AudioResponse::clear_processed_audio() {
  processed_audio_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AudioResponse::processed_audio() const {
  // @@protoc_insertion_point(field_get:fxp.AudioResponse.processed_audio)
  return processed_audio_.GetNoArena();
}
void AudioResponse::set_processed_audio(const ::std::string& value) {
  
  processed_audio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fxp.AudioResponse.processed_audio)
}
#if LANG_CXX11
void AudioResponse::set_processed_audio(::std::string&& value) {
  
  processed_audio_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fxp.AudioResponse.processed_audio)
}
#endif
void AudioResponse::set_processed_audio(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  processed_audio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fxp.AudioResponse.processed_audio)
}
void AudioResponse::set_processed_audio(const void* value, size_t size) {
  
  processed_audio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fxp.AudioResponse.processed_audio)
}
::std::string* AudioResponse::mutable_processed_audio() {
  
  // @@protoc_insertion_point(field_mutable:fxp.AudioResponse.processed_audio)
  return processed_audio_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AudioResponse::release_processed_audio() {
  // @@protoc_insertion_point(field_release:fxp.AudioResponse.processed_audio)
  
  return processed_audio_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioResponse::set_allocated_processed_audio(::std::string* processed_audio) {
  if (processed_audio != NULL) {
    
  } else {
    
  }
  processed_audio_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processed_audio);
  // @@protoc_insertion_point(field_set_allocated:fxp.AudioResponse.processed_audio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace fxp

// @@protoc_insertion_point(global_scope)
