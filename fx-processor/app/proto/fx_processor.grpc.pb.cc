// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/fx_processor.proto

#include "proto/fx_processor.pb.h"
#include "proto/fx_processor.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace fxp {

static const char* FXProcessor_method_names[] = {
  "/fxp.FXProcessor/ProcessAudio",
};

std::unique_ptr< FXProcessor::Stub> FXProcessor::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< FXProcessor::Stub> stub(new FXProcessor::Stub(channel));
  return stub;
}

FXProcessor::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ProcessAudio_(FXProcessor_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FXProcessor::Stub::ProcessAudio(::grpc::ClientContext* context, const ::fxp::AudioRequest& request, ::fxp::AudioRequest* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ProcessAudio_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::fxp::AudioRequest>* FXProcessor::Stub::AsyncProcessAudioRaw(::grpc::ClientContext* context, const ::fxp::AudioRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::fxp::AudioRequest>::Create(channel_.get(), cq, rpcmethod_ProcessAudio_, context, request);
}

FXProcessor::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      FXProcessor_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FXProcessor::Service, ::fxp::AudioRequest, ::fxp::AudioRequest>(
          std::mem_fn(&FXProcessor::Service::ProcessAudio), this)));
}

FXProcessor::Service::~Service() {
}

::grpc::Status FXProcessor::Service::ProcessAudio(::grpc::ServerContext* context, const ::fxp::AudioRequest* request, ::fxp::AudioRequest* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace fxp

